# This is a basic workflow to help you get started with Actions

name: Build, test, and deploy

# Controls when the workflow will run
on:
  push:

  pull_request:
    branches: [main]

  repository_dispatch:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "6.0.x"
          include-prerelease: false

      - name: Setup OpenJDK 11
        uses: actions/setup-java@v2.4.0
        with:
          distribution: "zulu"
          java-version: "11"

      - name: Setup Dotnet-SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner --version 5.5.3

      - name: sonarscanner begin
        if: ${{ env.SONAR_TOKEN != null }}
        run: dotnet sonarscanner begin /o:dliu /k:lab18-sonar-scan /d:sonar.host.url=https://sonarcloud.io /v:"1.0" /d:sonar.login=$SONAR_TOKEN /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.coverage.exclusions="**Test*.cs" /d:sonar.exclusions="sonar-project.properties, .**/**, **/wwwroot/**, **/TestResults/**, **/obj/**, **/bin/**"
        env:
          SONAR_TOKEN: ${{ secrets.SONARTOKEN }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Test
        run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --collect:"XPlat Code Coverage" -c Release --no-restore --no-build --verbosity normal --filter "Category!=LongRunning"

      - name: sonarscanner end
        if: ${{ env.SONAR_TOKEN != null }}
        run: dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN
        env:
          SONAR_TOKEN: ${{ secrets.SONARTOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish
        run: dotnet publish -c Release -o aspnetapi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: aspnetapi
          path: "./aspnetapi"
